// <auto-generated />
using System;
using Donate.FundService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Donate.FundService.API.Migrations
{
    [DbContext(typeof(FundContext))]
    [Migration("20190918093915_RemoveDonorIdentifier")]
    partial class RemoveDonorIdentifier
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Donate.FundService.Data.Entities.DonorTransactionSource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FinancialInstitution")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("TransactionSourceIdentifier");

                    b.HasKey("Id");

                    b.ToTable("DonorTransactionSource");
                });

            modelBuilder.Entity("Donate.FundService.Data.Entities.Merchant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExternalMerchantIdentifier")
                        .IsRequired();

                    b.Property<string>("MerchantName")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("Merchant");
                });

            modelBuilder.Entity("Donate.FundService.Data.Entities.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<long>("DonorTransactionSourceId");

                    b.Property<string>("ExternalTransactionIdentifier")
                        .IsRequired();

                    b.Property<long>("MerchantId");

                    b.Property<DateTime>("ReceivedDateTimeUtc");

                    b.Property<DateTime>("TransactionDateTimeUtc");

                    b.Property<Guid>("TransactionIdentifier");

                    b.HasKey("Id");

                    b.HasIndex("DonorTransactionSourceId");

                    b.HasIndex("MerchantId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Donate.FundService.Data.Entities.Transaction", b =>
                {
                    b.HasOne("Donate.FundService.Data.Entities.DonorTransactionSource", "DonorTransactionSource")
                        .WithMany()
                        .HasForeignKey("DonorTransactionSourceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Donate.FundService.Data.Entities.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
